{"meta":{"title":"杨文生的博客","subtitle":null,"description":"终生学习","author":"杨文生","url":"http://xinglinglove.cn"},"pages":[{"title":"Cron表达式使用手册","date":"2018-07-23T04:42:29.000Z","updated":"2019-05-26T13:00:22.418Z","comments":true,"path":"util/cron.html","permalink":"http://xinglinglove.cn/util/cron.html","excerpt":"","text":"1、官方详解12345678910111213* 第一位，表示秒，取值0-59* 第二位，表示分，取值0-59* 第三位，表示小时，取值0-23* 第四位，日期天/日，取值1-31* 第五位，日期月份，取值1-12* 第六位，星期，取值1-7，星期一，星期二...，注：不是第1周，第二周的意思另外：1表示星期天，2表示星期一。* 第7为，年份，可以留空，取值1970-2099(*)星号：可以理解为每的意思，每秒，每分，每天，每月，每年...(?)问号：问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天3点执行，所以第六位星期的位置，我们是不需要关注的，就是不确定的值。同时：日期和星期是两个相互排斥的元素，通过问号来表明不指定值。比如，1月10日，比如是星期1，如果在星期的位置是另指定星期二，就前后冲突矛盾了。(-)减号：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12(,)逗号：表达一个列表值，如在星期字段中使用“1,2,4”，则表示星期一，星期二，星期四(/)斜杠：如：x/y，x是开始值，y是步长，比如在第一位（秒） 0/15就是，从0秒开始，每15秒，最后就是0，15，30，45，60 另：*/y，等同于0/y 2、使用案例1234560 0 3 * * ? 每天3点执行0 5 3 * * ? 每天3点5分执行0 5 3 ? * * 每天3点5分执行，与上面作用相同0 5/10 3 * * ? 每天3点的 5分，15分，25分，35分，45分，55分这几个时间点执行0 10 3 ? * 1 每周星期天，3点10分 执行，注：1表示星期天 0 10 3 ? * 1#3 每个月的第三个星期，星期天 执行，#号只能出现在星期的位置"}],"posts":[{"title":"spring-boot整合docker插件实现项目部署","slug":"spring-boot-docker","date":"2018-12-26T12:42:29.000Z","updated":"2019-05-26T14:06:16.133Z","comments":true,"path":"2018/12/26/spring-boot-docker/","link":"","permalink":"http://xinglinglove.cn/2018/12/26/spring-boot-docker/","excerpt":"","text":"1、 部署环境（docker安装步骤参考之前的博客）JDK1.8、Docker1.13.1、CentOS7.02、docker开启远程访问1[root@xinglinglove ~]# vim /lib/systemd/system/docker.service 2、docker开启远程访问红色部分为新增内容1234567891011121314151617181920212223242526272829303132333435363738394041[Unit]Description=Docker Application Container EngineDocumentation=http://docs.docker.comAfter=network.target rhel-push-plugin.socket registries.serviceWants=docker-storage-setup.serviceRequires=docker-cleanup.timer[Service]Type=notifyNotifyAccess=allEnvironmentFile=-/run/containers/registries.confEnvironmentFile=-/etc/sysconfig/dockerEnvironmentFile=-/etc/sysconfig/docker-storageEnvironmentFile=-/etc/sysconfig/docker-networkEnvironment=GOTRACEBACK=crashEnvironment=DOCKER_HTTP_HOST_COMPAT=1Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbinExecStart=/usr/bin/dockerd-current \\ --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \\ --default-runtime=docker-runc \\ --exec-opt native.cgroupdriver=systemd \\ --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \\ --seccomp-profile=/etc/docker/seccomp.json \\ -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock \\ $OPTIONS \\ $DOCKER_STORAGE_OPTIONS \\ $DOCKER_NETWORK_OPTIONS \\ $ADD_REGISTRY \\ $BLOCK_REGISTRY \\ $INSECURE_REGISTRY \\ $REGISTRIESExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=1048576LimitNPROC=1048576LimitCORE=infinityTimeoutStartSec=0Restart=on-abnormalMountFlags=slaveKillMode=process[Install]WantedBy=multi-user.target 3.重启docker12[root@xinglinglove ~]# systemctl daemon-reload [root@xinglinglove ~]# systemctl restart docker.service 4.测试是否生效123curl http://140.143.0.126:2375/info返回如下信息代表开启成功&#123;\"ID\":\"27LC:PLU7:B5DF:H3KS:QGUH:TABJ:5YJC:DNEV:NEZL:L33Y:BOWB:KOZV\",\"Containers\":6,\"ContainersRunning\":5,\"ContainersP aus ed\":0,\"ContainersStopped\":1,\"Images\":10,\"Driver\":\"overlay2\",\"DriverStatus\":[[\"Backing Filesystem\",\"extfs\"],[\"Supports d_ type\",\"true\"],[\"Native Overlay Diff\",\"true\"]],\"SystemStatus\":null,\"Plugins\":&#123;\"Volume\":[\"local\"],\"Network\":[\"bridge\",\"hos t\",\"macvlan\",\"null\",\"overlay\"],\"Authorization\":null&#125;,\"MemoryLimit\":true,\"SwapLimit\":true,\"KernelMemory\":true,\"CpuCfsPeri od\":true,\"CpuCfsQuota\":true,\"CPUShares\":true,\"CPUSet\":true,\"IPv4Forwarding\":true,\"BridgeNfIptables\":true,\"BridgeNfIp6tab les\":true,\"Debug\":false,\"NFd\":50,\"OomKillDisable\":true,\"NGoroutines\":44,\"SystemTime\":\"2019-03-26T16:42:23.723116602+08:0 0\",\"LoggingDriver\":\"journald\",\"CgroupDriver\":\"systemd\",\"NEventsListener\":0,\"KernelVersion\":\"3.10.0-693.el7.x86_64\",\"PkgV ersion\":\"&lt;unknown&gt;\",\"OperatingSystem\":\"CentOS Linux 7 (Core)\",\"OSType\":\"linux\",\"Architecture\":\"x86_64\",\"IndexServerAddre ss\":\"https://index.docker.io/v1/\",\"IndexServerName\":\"docker.io\",\"RegistryConfig\":&#123;\"InsecureRegistryCIDRs\":[\"127.0.0.0/8\" ],\"IndexConfigs\":&#123;\"docker.io\":&#123;\"Name\":\"docker.io\",\"Mirrors\":null,\"Secure\":true,\"Official\":true&#125;&#125;,\"Mirrors\":[]&#125;,\"NCPU\":1, \"MemTotal\":1928822784,\"DockerRootDir\":\"/var/lib/docker\",\"HttpProxy\":\"\",\"HttpsProxy\":\"\",\"NoProxy\":\"\",\"Name\":\"xinglinglove \",\"Labels\":null,\"ExperimentalBuild\":false,\"ServerVersion\":\"1.13.1\",\"ClusterStore\":\"\",\"ClusterAdvertise\":\"\",\"Runtimes\":&#123;\" docker-runc\":&#123;\"path\":\"/usr/libexec/docker/docker-runc-current\"&#125;,\"runc\":&#123;\"path\":\"docker-runc\"&#125;&#125;,\"DefaultRuntime\":\"docker- runc\",\"Swarm\":&#123;\"NodeID\":\"\",\"NodeAddr\":\"\",\"LocalNodeState\":\"inactive\",\"ControlAvailable\":false,\"Error\":\"\",\"RemoteManagers \":null,\"Nodes\":0,\"Managers\":0,\"Cluster\":&#123;\"ID\":\"\",\"Version\":&#123;&#125;,\"CreatedAt\":\"0001-01-01T00:00:00Z\",\"UpdatedAt\":\"0001-01-01 T00:00:00Z\",\"Spec\":&#123;\"Orchestration\":&#123;&#125;,\"Raft\":&#123;\"ElectionTick\":0,\"HeartbeatTick\":0&#125;,\"Dispatcher\":&#123;&#125;,\"CAConfig\":&#123;&#125;,\"TaskDe faults\":&#123;&#125;,\"EncryptionConfig\":&#123;\"AutoLockManagers\":false&#125;&#125;&#125;&#125;,\"LiveRestoreEnabled\":false,\"Isolation\":\"\",\"InitBinary\":\"dock er-init\",\"ContainerdCommit\":&#123;\"ID\":\"\",\"Expected\":\"aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1\"&#125;,\"RuncCommit\":&#123;\"ID\":\"N/A\",\"Ex pected\":\"9df8b306d01f59d3a8029be411de015b7304dd8f\"&#125;,\"InitCommit\":&#123;\"ID\":\"N/A\",\"Expected\":\"949e6facb77383876aeff8a6944dde6 6b3089574\"&#125;,\"SecurityOptions\":[\"name=seccomp,profile=/etc/docker/seccomp.json\"],\"Registries\":[&#123;\"Name\":\"docker.io\",\"Secur e\":true&#125;]&#125; 5.在自己的spring-boot项目的pom中添加插件12345678910111213141516171819&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt; docker-maven-plugin &lt;/artifactId&gt; &lt;version&gt;0.4.14&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;website&lt;/imageName&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;dockerHost&gt; http://140.143.0.126:2375&lt;/dockerHost&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125; &lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 6.在工程中新建src/main/docker目录和Dockerfile文件123456789# 基于哪个镜像FROM java:8# 将本地文件夹挂载到当前容器VOLUME /tmp# 拷贝文件到容器，xinglinglove-website-0.0.1-SNAPSHOT.jar这里是maven打包后的名字ADD xinglinglove-website-0.0.1-SNAPSHOT.jar app.jarRUN bash -c 'touch /app.jar'# 配置容器启动后执行的命令ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] 7.构建镜像并上传至docker使用maven运行如下命令1clean package docker:build -DskipTests 8.上传成功后，在服务器输入docker imgaes查看镜像是否上传成功123[root@xinglinglove nginx]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwebsite latest 875823024f38 42 minutes ago 715 MB 9.新建容器，启动项目1[root@xinglinglove nginx]# docker run -t -d -p 8888:8888 website /bin/bash 10.访问项目地址，验证成功（登陆页有点丑，请见谅）http://140.143.0.126:8888/login 11.推送 image 到 Docker Hub首先，你在 Docker Hub 要有注册账号，且创建了相应的库；其次，docker 推送前，先要登录，否则报unauthorized: access to the requested resource is not authorized的错误12345[root@xinglinglove ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: xinglinglove1029Password: Login Succeeded 这里需要将website:v1镜像改名，在名称前加上自己的docker hub的Docker ID，即xinglinglove1029123456[root@xinglinglove ~]# docker tag b158f9fff842 xinglinglove1029/website:v1[root@xinglinglove ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwebsite latest b158f9fff842 2 days ago 721 MBxinglinglove1029/website v1 b158f9fff842 2 days ago 721 MB[root@xinglinglove ~]# docker push xinglinglove1029/website:v1","categories":[{"name":"spring-boot","slug":"spring-boot","permalink":"http://xinglinglove.cn/categories/spring-boot/"}],"tags":[{"name":"spring-boot","slug":"spring-boot","permalink":"http://xinglinglove.cn/tags/spring-boot/"},{"name":"docker","slug":"docker","permalink":"http://xinglinglove.cn/tags/docker/"}],"keywords":[{"name":"spring-boot","slug":"spring-boot","permalink":"http://xinglinglove.cn/categories/spring-boot/"}]},{"title":"Cron表达式使用手册","slug":"cron","date":"2018-07-23T04:42:29.000Z","updated":"2019-05-26T14:11:06.828Z","comments":true,"path":"2018/07/23/cron/","link":"","permalink":"http://xinglinglove.cn/2018/07/23/cron/","excerpt":"","text":"1、官方详解12345678910111213* 第一位，表示秒，取值0-59* 第二位，表示分，取值0-59* 第三位，表示小时，取值0-23* 第四位，日期天/日，取值1-31* 第五位，日期月份，取值1-12* 第六位，星期，取值1-7，星期一，星期二...，注：不是第1周，第二周的意思另外：1表示星期天，2表示星期一。* 第7为，年份，可以留空，取值1970-2099(*)星号：可以理解为每的意思，每秒，每分，每天，每月，每年...(?)问号：问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天3点执行，所以第六位星期的位置，我们是不需要关注的，就是不确定的值。同时：日期和星期是两个相互排斥的元素，通过问号来表明不指定值。比如，1月10日，比如是星期1，如果在星期的位置是另指定星期二，就前后冲突矛盾了。(-)减号：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12(,)逗号：表达一个列表值，如在星期字段中使用“1,2,4”，则表示星期一，星期二，星期四(/)斜杠：如：x/y，x是开始值，y是步长，比如在第一位（秒） 0/15就是，从0秒开始，每15秒，最后就是0，15，30，45，60 另：*/y，等同于0/y 2、使用案例1234560 0 3 * * ? 每天3点执行0 5 3 * * ? 每天3点5分执行0 5 3 ? * * 每天3点5分执行，与上面作用相同0 5/10 3 * * ? 每天3点的 5分，15分，25分，35分，45分，55分这几个时间点执行0 10 3 ? * 1 每周星期天，3点10分 执行，注：1表示星期天 0 10 3 ? * 1#3 每个月的第三个星期，星期天 执行，#号只能出现在星期的位置","categories":[{"name":"cron","slug":"cron","permalink":"http://xinglinglove.cn/categories/cron/"}],"tags":[{"name":"cron","slug":"cron","permalink":"http://xinglinglove.cn/tags/cron/"}],"keywords":[{"name":"cron","slug":"cron","permalink":"http://xinglinglove.cn/categories/cron/"}]},{"title":"那些年我们用过的idea装逼大法","slug":"ideaConfig","date":"2018-06-26T09:35:15.000Z","updated":"2019-05-26T14:09:09.606Z","comments":true,"path":"2018/06/26/ideaConfig/","link":"","permalink":"http://xinglinglove.cn/2018/06/26/ideaConfig/","excerpt":"","text":"1、 Material Theme UI 漂亮的idea主题2、activate-power-mode 写代码是整个屏幕都在抖动，activate-power-mode是白的的，Power mode II色彩更酷炫点。3、Background Image Plusidea背景修改插件，让你的idea与众不同，可以设置自己喜欢的图片作为code背景。4、Grep console自定义日志颜色，idea控制台可以彩色显示各种级别的log，安装完成后，在console中右键就能打开。 并且可以设置不同的日志级别的显示样式。 5、Free Mybatis pluginmybatis 插件，让你的mybatis.xml像java代码一样编辑。我们开发中使用mybatis时时长需要通过mapper接口查找对应的xml中的sql语句，该插件方便了我们的操作。安装完成重启IDEA之后，我们会看到code左侧或多出一列绿色的箭头，点击箭头我们就可以直接定位到xml相应文件的位置。mapper如图： xml如图： 6、MyBatis Log PluginMybatis现在是java中操作数据库的首选，在开发的时候，我们都会把Mybatis的脚本直接输出在console中，但是默认的情况下，输出的脚本不是一个可以直接执行的。mapper如图： xml如图： 7、LombokJava语言，每次写实体类的时候都需要写一大堆的setter，getter，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担，这也是Java被诟病的一种原因。Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。安装完成之后，在应用Lombok的时候注意别忘了需要添加依，maven为例： xml如图： 8、Key promoterKey promoter 是IntelliJ IDEA的快捷键提示插件，会统计你鼠标点击某个功能的次数，提示 你应该用什么快捷键，帮助记忆快捷键，等熟悉了之后可以关闭掉这个插件。9、RestfultookitSpring MVC网页开发的时候，我们都是通过requestmapping的方式来定义页面的URL地址的，为了找到这个地址我们一般都是cmd+shift+F的方式进行查找，大家都知道，我们URL的命名一个是类requestmapping+方法requestmapping，查找的时候还是有那么一点不方便的，restfultookit就能很方便的帮忙进行查找。例如：我要找到/user/index 对应的controller,那么只要Ctrl+斜杠 10、Gsonformat可根据json数据快速生成java实体类。自定义个javaBean(无任何内容，就一个空的类)，复制你要解析的Json，然后alt+insert弹出如下界面或者使用快捷键 Alt+S，在里面粘贴刚刚复制的Json，点击OK即可。 11、JRebelJRebel是一种热部署生产力工具，修改代码后不用重新启动程序，所有的更改便可以生效。它跳过了Java开发中常见的重建、重新启动和重新部署周期。12、.ignore各类版本控制忽略文件生成工具 13、Rainbow Brackets对各个对称括号进行着色，方便查看 14、Maven HelperMaven 辅助插件15、Nyan progress bar漂亮的进度条插件:","categories":[{"name":"idea","slug":"idea","permalink":"http://xinglinglove.cn/categories/idea/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://xinglinglove.cn/tags/idea/"}],"keywords":[{"name":"idea","slug":"idea","permalink":"http://xinglinglove.cn/categories/idea/"}]},{"title":"Centos7源码编译安装NGINX","slug":"installNginx","date":"2018-05-26T07:45:15.000Z","updated":"2019-05-26T13:51:18.966Z","comments":true,"path":"2018/05/26/installNginx/","link":"","permalink":"http://xinglinglove.cn/2018/05/26/installNginx/","excerpt":"","text":"1、 什么是nginxNginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。 2、 下载 进入http://nginx.org/en/download.html 下载nginx1.8.0版本（当前最新稳定版本）。 3、 nginx安装环境1234[root@xinglinglove ~]# yum –y install gcc-c++[root@xinglinglove ~]# yum install -y pcre pcre-devel[root@xinglinglove ~]# yum install -y zlib zlib-devel[root@xinglinglove ~]# yum install -y openssl openssl-devel 4、 编译安装将nginx-1.8.0.tar.gz拷贝至linux服务器。解压：1234567891011121314151617[root@xinglinglove ~]# tar -zxvf nginx-1.8.0.tar.gz[root@xinglinglove ~]# cd nginx-1.8.0[root@xinglinglove ~]# mkdir -p /var/temp/nginx[root@xinglinglove ~]# ./configure \\--prefix=/usr/local/nginx \\--pid-path=/var/run/nginx/nginx.pid \\--lock-path=/var/lock/nginx.lock \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--with-http_gzip_static_module \\--http-client-body-temp-path=/var/temp/nginx/client \\--http-proxy-temp-path=/var/temp/nginx/proxy \\--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\--http-scgi-temp-path=/var/temp/nginx/scgi[root@xinglinglove ~]#make -j 4[root@xinglinglove ~]#make install 5、启动nginx12[root@xinglinglove ~]# cd /usr/local/nginx/sbin/[root@xinglinglove ~]# ./nginx 6、查询nginx进程1234[root@xinglinglove ~]# ps -aux |grep nginxroot 10478 0.0 0.0 24880 800 ? Ss 17:19 0:00 nginx: master process ./sbin/nginxnobody 10479 0.0 0.0 27320 1816 ? S 17:19 0:00 nginx: worker processroot 12025 0.0 0.0 112704 976 pts/0 R+ 17:37 0:00 grep --color=auto nginx 7、停止nginx1[root@xinglinglove ~]#/usr/local/nginx/sbin/nginx -s stop 8、重新加载配置1[root@xinglinglove ~]#/usr/local/nginx/sbin/nginx -s reload 9、nginx反向代理通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 如下图： 10、 nginx反向代理配置 (反向代理rabbitmq)1234567891011#配置一个代理即rabbitmq服务器upstream rabbitmq_server &#123; server 192.168.101.5:15672; &#125;#配置一个虚拟主机 server &#123; listen 80; server_name rabbitmq.xinglinglove.cn; location / &#123; proxy_pass http://rabbitmq_server ; &#125; 11、测试http://rabbitmq.xinglinglove.cn","categories":[{"name":"运维","slug":"运维","permalink":"http://xinglinglove.cn/categories/运维/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://xinglinglove.cn/tags/Nginx/"}],"keywords":[{"name":"运维","slug":"运维","permalink":"http://xinglinglove.cn/categories/运维/"}]}]}