{"meta":{"title":"杨文生的博客","subtitle":null,"description":"终生学习","author":"杨文生","url":"http://xinglinglove.cn"},"pages":[],"posts":[{"title":"Linux文件查询命令","slug":"linux-view","date":"2019-06-06T03:39:20.000Z","updated":"2019-06-06T04:01:25.716Z","comments":true,"path":"2019/06/06/linux-view/","link":"","permalink":"http://xinglinglove.cn/2019/06/06/linux-view/","excerpt":"","text":"1、命令之cat12例子：查看passwd文件内容。[root@VM_24_235_centos ~]# cat /etc/passwd 注意：cat命令一次显示整个文件的内容，但是在输入显示时，并非一次显示整个文件的内容，这个是cat命令程序的一个缺陷，查看大文件时，会造成一定的困难，尤其是在本地终端时，使用ahift+pgup键上翻，ahift+pgdu键下翻，但是上下翻屏是有限的，一些大的文件，是未必能翻到首部，因为在查看文件时，是把文件加载到内存中再输出，而内存区域是有限的，比如一个文件查看总共50屏，内存只缓存了20屏，那么上下翻也就最多能翻到最后缓存的20屏，cat命令程序只是把文件内容加载到内存中并输出，输出完成后cat命令程序则自动退出。2、命令之more作用：以分页形式显示文件内容。命令使用格式：more 文件名1[root@VM_24_235_centos ~]# more /etc/httpd/conf/httpd.conf 说明： more命令程序在查看文件，并且显示当前查看文本内容的百分比 ，实际上more不支持向前翻，只要没翻到未部，可以向前翻一屏，但不能向前翻一行。翻屏操作：向后翻一屏：SPACE （空格键）向前翻一屏：b 键 （如果翻到最后一屏时，则不能向前翻，此时会自动退出）向后翻一行：ENTER （回车键）退出查看：q键3、命令之less作用：和more功能一样。命令使用格式：less 文件名1[root@VM_24_235_centos ~]# lees /etc/httpd/conf/httpd.conf 说明：实际上man手册是用less打开某个命令的使用手册的，命令都有一个使用手册，在使用man时，man会到命令的使用手册所在位置用less打开命令的使用手册，所以less和使用man时基本相同操作。翻屏操作：向后翻一屏：SPACE （空格键） 或：pageup按键。向前翻一屏：b 键 或：pagedown按键。向后翻一行：ENTER （回车键）。向前翻一行：k 键。搜索/查找操作：2种方法（默认不区分在小写）/关键字 #可以搜索关键字：在所处的位置向后查找。？关键字 #可以搜索关键字：在所处的位置向前查找。按 n 键 #跳到下一个关键字。按 b 键 #跳到上一个关键字。退出按 q 键。Linux中more与less的区别：more：不支持后退，但几乎不需要加参数，空格键是向后翻屏，Enter键是向后翻一行，在不需要后退的情况下比较方便。less：支持前后翻滚，既可以向前翻屏SPACE （空格键）或（pageup按键），也可以向后翻屏b 键或（pagedown按键），空格键是向前翻屏，Enter键是向后翻一行。4、命令之head作用: 用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。命令使用格式：head [选项] 文件名选项：-n 显示从文件头开始的行数，例：-n 3 查看文件中的开始3行内容，-n的写法支持 -n3（选项与选项参数不需要空格），还可以直接 -3 指定查看文件的开始3行。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152例子：查看passwd文件内容。[root@VM_24_235_centos opt]# head /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologin [root@VM_24_235_centos opt]# head -n 3 /etc/passwd #显示前3行root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin [root@VM_24_235_centos ~]# head -n3 /etc/passwd #-n3 （选项与选项参数不需要空格）的写法。root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin [root@VM_24_235_centos ~]# head -3 /etc/passwd #直接 -3 指定查看文件前3行。root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin 注意：cat命令一次显示整个文件的内容，但是在输入显示时，并非一次显示整个文件的内容，这个是cat命令程序的一个缺陷，查看大文件时，会造成一定的困难，尤其是在本地终端时，使用ahift+pgup键上翻，ahift+pgdu键下翻，但是上下翻屏是有限的，一些大的文件，是未必能翻到首部，因为在查看文件时，是把文件加载到内存中再输出，而内存区域是有限的，比如一个文件查看总共50屏，内存只缓存了20屏，那么上下翻也就最多能翻到最后缓存的20屏，cat命令程序只是把文件内容加载到内存中并输出，输出完成后cat命令程序则自动退出。5、命令之tail作用：用于显示文件中的尾部内容。默认在屏幕上显示指定文件的末尾10行。语法：tail [选项] 文件名参数：-n 显示文件尾部多少行的内容（n为数字）。-f 动态查看，在查看某个文件时默认查看后10行，显示后并不退查看，等待显示后续追加至此文件的新增内容，并立即显示出来，一般用于查看日志文件。12345678910例子：查看passwd文件内容。[root@VM_24_235_centos ~]# tail -n 3 /var/log/secure #查看最后3行记录。[root@VM_24_235_centos ~]# tail -f /var/log/secure #动态查看到登录成功的日志。[root@VM_24_235_centos ~]# ssh root@192.168.1.63 #在另一个终端远程登录Linux，登录成功后。[root@VM_24_235_centos ~]# tail -f /var/log/secure #可以动态查看到登录成功的日志。Nov 17 00:08:32 VM_24_235_centos sshd[2924]: Acceptedpassword for root from 192.168.1.63 port 39904 ssh2","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"linux命令","slug":"linux命令","permalink":"http://xinglinglove.cn/tags/linux命令/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos7 安装rabbitmq","slug":"centos-install-rabbitmq","date":"2019-06-03T10:50:51.000Z","updated":"2019-06-03T10:59:09.894Z","comments":true,"path":"2019/06/03/centos-install-rabbitmq/","link":"","permalink":"http://xinglinglove.cn/2019/06/03/centos-install-rabbitmq/","excerpt":"","text":"1、erlang在安装前需要先安装下它的依赖工具1[root@VM_24_235_centos ~]# yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel 2、去erlang官网下载最新安装包123[root@VM_24_235_centos ~]# wget http://erlang.org/download/otp_src_22.0.tar.gz[root@VM_24_235_centos ~]# tar -xvf otp_src_22.0.tar.gz[root@VM_24_235_centos ~]# cd otp_src_22.0/ 3、配置1[root@VM_24_235_centos ~]# ./configure --prefix=/usr/local/erlang --with-ssl -enable-threads -enable-smmp-support -enable-kernel-poll --enable-hipe --without-javac 4、编译及安装1[root@VM_24_235_centos ~]# make -j 4 &amp;&amp; make install 5、配置环境变量1234[root@VM_24_235_centos ~]# vim /etc/profileERLANG_HOME=/usr/local/erlangPATH=$PATH:$JAVA_HOME/bin:$ERLANG_HOME/bin[root@VM_24_235_centos ~]# source /etc/profile 6、检验erl1234[root@VM_24_235_centos ~]# erlErlang/OTP 22 [erts-10.4] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1] [hipe]Eshell V10.4 (abort with ^G) 7、安装rabbitmq，去官网下载安装包,并且解压123[root@VM_24_235_centos ~]# wget wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.14/rabbitmq-server-generic-unix-3.7.14.tar.xz[root@VM_24_235_centos ~]# xz -d rabbitmq-server-generic-unix-3.7.14.tar.xz [root@VM_24_235_centos ~]#tar -xvf rabbitmq-server-generic-unix-3.7.14.tar 8、启用web管理界面12[root@VM_24_235_centos local]# cd rabbitmq/[root@VM_24_235_centos sbin]# ./rabbitmq-plugins enable rabbitmq_management 9、添加用户12[root@VM_24_235_centos sbin]# ./rabbitmqctl add_user yangwensheng 123456Adding user \"yangwensheng\" ... 10、设置权限12[root@VM_24_235_centos sbin]# ./rabbitmqctl set_user_tags yangwensheng administratorSetting tags for user \"yangwensheng\" to [administrator] ... 11、浏览器输入地址访问","categories":[{"name":"运维","slug":"运维","permalink":"http://xinglinglove.cn/categories/运维/"}],"tags":[{"name":"rabbitmq","slug":"rabbitmq","permalink":"http://xinglinglove.cn/tags/rabbitmq/"}],"keywords":[{"name":"运维","slug":"运维","permalink":"http://xinglinglove.cn/categories/运维/"}]},{"title":"HashMap底层数据结构","slug":"HashMap","date":"2019-02-28T09:49:46.000Z","updated":"2019-05-27T11:26:02.810Z","comments":true,"path":"2019/02/28/HashMap/","link":"","permalink":"http://xinglinglove.cn/2019/02/28/HashMap/","excerpt":"","text":"HashMap也是我们使用非常多的Collection，它是基于哈希表的 Map 接口的实现，以key-value的形式存在。在HashMap中，key-value总是会当做一个整体来处理，系统会根据hash算法来来计算key-value的存储位置，我们总是可以通过key快速地存、取value。下面就来分析HashMap的存取。一、定义HashMap实现了Map接口，继承AbstractMap。其中Map接口定义了键映射到值的规则，而AbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作，其实AbstractMap类已经实现了Map，这里标注Map， LZ觉得应该是更加清晰吧！12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable&#123; /** * The default initial capacity - MUST be a power of two. */ static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 /** * The maximum capacity, used if a higher value is implicitly specified * by either of the constructors with arguments. * MUST be a power of two &lt;= 1&lt;&lt;30. */ static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; /** * The load factor used when none specified in constructor. */ static final float DEFAULT_LOAD_FACTOR = 0.75f; /** * An empty table instance to share when the table is not inflated. */ static final Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;; /** * The table, resized as necessary. Length MUST Always be a power of two. */ transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE; /** * The number of key-value mappings contained in this map. */ transient int size; /** * The next size value at which to resize (capacity * load factor). * @serial */ // If table == EMPTY_TABLE then this is the initial capacity at which the // table will be created when inflated. int threshold; /** * The load factor for the hash table. * * @serial */ final float loadFactor; /** * The number of times this HashMap has been structurally modified * Structural modifications are those that change the number of mappings in * the HashMap or otherwise modify its internal structure (e.g., * rehash). This field is used to make iterators on Collection-views of * the HashMap fail-fast. (See ConcurrentModificationException). */ transient int modCount; /** * The default threshold of map capacity above which alternative hashing is * used for String keys. Alternative hashing reduces the incidence of * collisions due to weak hash code calculation for String keys. * &lt;p/&gt; * This value may be overridden by defining the system property * &#123;@code jdk.map.althashing.threshold&#125;. A property value of &#123;@code 1&#125; * forces alternative hashing to be used at all times whereas * &#123;@code -1&#125; value ensures that alternative hashing is never used. */ static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;&#125; 二、构造函数HashMap提供了三个构造函数：HashMap()：构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。 HashMap(int initialCapacity)：构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。 HashMap(int initialCapacity, float loadFactor)：构造一个带指定初始容量和加载因子的空 HashMap。 在这里提到了两个参数：初始容量，加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中桶的数量，初始容量是创建哈希表时的容量，加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。 对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一般情况下我们是无需修改的。 三、数据结构我们知道在Java中最常用的两种结构是数组和模拟指针(引用)，几乎所有的数据结构都可以利用这两种来组合实现，HashMap也是如此。实际上HashMap是一个“链表散列”，如下是它数据结构： 从上图我们可以看出HashMap底层实现还是数组，只是数组的每一项都是一条链。其中参数initialCapacity就代表了该数组的长度。下面为HashMap构造函数的源码：1234567891011121314public HashMap(int initialCapacity, float loadFactor) &#123; if (initialCapacity &lt; 0) throw new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity); if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\"Illegal load factor: \" + loadFactor); this.loadFactor = loadFactor; threshold = initialCapacity; init(); &#125; 从源码中可以看出，每次新建一个HashMap时，都会初始化一个table数组。table数组的元素为Entry节点。123456static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final K key; V value; Entry&lt;K,V&gt; next; int hash;&#125; 其中Entry为HashMap的内部类，它包含了键key、值value、下一个节点next，以及hash值，这是非常重要的，正是由于Entry才构成了table数组的项为链表。四、存储实现：put(key,vlaue)首先我们先看源码1234567891011121314151617181920212223242526public V put(K key, V value) &#123; //当key为null，调用putForNullKey方法，保存null与table第一个位置中，这是HashMap允许为null的原因 if (key == null) return putForNullKey(value); //计算key的hash值 int hash = hash(key.hashCode()); ------(1) //计算key hash 值在 table 数组中的位置 int i = indexFor(hash, table.length); ------(2) //从i出开始迭代 e,找到 key 保存的位置 for (Entry&lt;K, V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; //判断该条链上是否有hash值相同的(key相同) //若存在相同，则直接覆盖value，返回旧value if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; //旧值 = 新值 e.value = value; e.recordAccess(this); return oldValue; //返回旧值 &#125; &#125; //修改次数增加1 modCount++; //将key、value添加至i位置处 addEntry(hash, key, value, i); return null; &#125; 通过源码我们可以清晰看到HashMap保存数据的过程为：首先判断key是否为null，若为null，则直接调用putForNullKey方法。若不为空则先计算key的hash值，然后根据hash值搜索在table数组中的索引位置，如果table数组在该位置处有元素，则通过比较是否存在相同的key，若存在则覆盖原来key的value，否则将该元素保存在链头（最先保存的元素放在链尾）。若table在该处没有元素，则直接保存。这个过程看似比较简单，其实深有内幕。有如下几点：1、 先看迭代处。此处迭代原因就是为了防止存在相同的key值，若发现两个hash值（key）相同时，HashMap的处理方式是用新value替换旧value，这里并没有处理key，这就解释了HashMap中没有两个相同的key。 2、 在看（1）、（2）处。这里是HashMap的精华所在。首先是hash方法，该方法为一个纯粹的数学计算，就是计算h的hash值。1234567891011121314final int hash(Object k) &#123; int h = hashSeed; if (0 != h &amp;&amp; k instanceof String) &#123; return sun.misc.Hashing.stringHash32((String) k); &#125; h ^= k.hashCode(); // This function ensures that hashCodes that differ only by // constant multiples at each bit position have a bounded // number of collisions (approximately 8 at default load factor). h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12); return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4); &#125; HashMap的底层数组长度总是2的n次方，在构造函数中存在：capacity &lt;&lt;= 1;这样做总是能够保证HashMap的底层数组长度为2的n次方。当length为2的n次方时，h&amp;(length - 1)就相当于对length取模，而且速度比直接取模快得多，这是HashMap在速度上的一个优化。至于为什么是2的n次方下面解释。我们回到indexFor方法，该方法仅有一条语句：h&amp;(length - 1)，这句话除了上面的取模运算外还有一个非常重要的责任：均匀分布table数据和充分利用空间。 这里我们假设length为16(2^n)和15，h为5、6、7。 当n=15时，6和7的结果一样，这样表示他们在table存储的位置是相同的，也就是产生了碰撞，6、7就会在一个位置形成链表，这样就会导致查询速度降低。诚然这里只分析三个数字不是很多，那么我们就看0-15。 从上面的图表中我们看到总共发生了8此碰撞，同时发现浪费的空间非常大，有1、3、5、7、9、11、13、15处没有记录，也就是没有存放数据。这是因为他们在与14进行&amp;运算时，得到的结果最后一位永远都是0，即0001、0011、0101、0111、1001、1011、1101、1111位置处是不可能存储数据的，空间减少，进一步增加碰撞几率，这样就会导致查询速度慢。而当length = 16时，length – 1 = 15 即1111，那么进行低位&amp;运算时，值总是与原来hash值相同，而进行高位运算时，其值等于其低位值。所以说当length = 2^n时，不同的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布较均匀，查询速度也较快。这里我们再来复习put的流程：当我们想一个HashMap中添加一对key-value时，系统首先会计算key的hash值，然后根据hash值确认在table中存储的位置。若该位置没有元素，则直接插入。否则迭代该处元素链表并依此比较其key的hash值。如果两个hash值相等且key值相等(e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))),则用新的Entry的value覆盖原来节点的value。如果两个hash值相等但key值不等 ，则将该节点插入该链表的链头。具体的实现过程见addEntry方法，如下：123456789void addEntry(int hash, K key, V value, int bucketIndex) &#123; if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123; resize(2 * table.length); hash = (null != key) ? hash(key) : 0; bucketIndex = indexFor(hash, table.length); &#125; createEntry(hash, key, value, bucketIndex); &#125; 这个方法中有两点需要注意：一、链的产生。这是一个非常优雅的设计。系统总是将新的Entry对象添加到bucketIndex处。如果bucketIndex处已经有了对象，那么新添加的Entry对象将指向原有的Entry对象，形成一条Entry链，但是若bucketIndex处没有Entry对象，也就是e==null,那么新添加的Entry对象指向null，也就不会产生Entry链了。 二、扩容问题。随着HashMap中元素的数量越来越多，发生碰撞的概率就越来越大，所产生的链表长度就会越来越长，这样势必会影响HashMap的速度，为了保证HashMap的效率，系统必须要在某个临界点进行扩容处理。该临界点在当HashMap中元素的数量等于table数组长度*加载因子。但是扩容是一个非常耗时的过程，因为它需要重新计算这些数据在新table数组中的位置并进行复制处理。所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。五、读取实现：get(key)相对于HashMap的存而言，取就显得比较简单了。通过key的hash值找到在table数组中的索引处的Entry，然后返回该key对应的value即可。1234567891011121314151617181920212223242526272829303132333435363738public V get(Object key) &#123; if (key == null) return getForNullKey(); Entry&lt;K,V&gt; entry = getEntry(key); return null == entry ? null : entry.getValue(); &#125;final Entry&lt;K,V&gt; getEntry(Object key) &#123; if (size == 0) &#123; return null; &#125; int hash = (key == null) ? 0 : hash(key); for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; &#125; return null; &#125; 在这里能够根据key快速的取到value除了和HashMap的数据结构密不可分外，还和Entry有莫大的关系，在前面就提到过，HashMap在存储过程中并没有将key，value分开来存储，而是当做一个整体key-value来处理的，这个整体就是Entry对象。同时value也只相当于key的附属而已。在存储的过程中，系统根据key的hashcode来决定Entry在table数组中的存储位置，在取的过程中同样根据key的hashcode取出相对应的Entry对象。","categories":[{"name":"面试","slug":"面试","permalink":"http://xinglinglove.cn/categories/面试/"}],"tags":[{"name":"java","slug":"java","permalink":"http://xinglinglove.cn/tags/java/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"http://xinglinglove.cn/categories/面试/"}]},{"title":"Linux 命令行快捷键","slug":"linux-commond","date":"2019-02-21T09:29:25.000Z","updated":"2019-05-27T09:37:17.732Z","comments":true,"path":"2019/02/21/linux-commond/","link":"","permalink":"http://xinglinglove.cn/2019/02/21/linux-commond/","excerpt":"","text":"在操作Linux的时候，有的时候从其他地方copy一段命令，发现前面多了东西或少了东西，要移动左右键到最前面，改完再移动到最后面，真是麻烦至极，幸好有快捷键，来解决一些这样的问题。涉及在linux命令行下进行快速移动光标、命令编辑、编辑后执行历史命令、Bang(!)命令、控制命令等。让basher更有效率。1、常用1234567891011121314151617Ctrl + 左右键：在单词之间跳转Ctrl + A：跳到本行的行首Ctrl + E：跳到页尾Ctrl + U：删除当前光标前面的所有文字（还有剪切功能）Ctrl + K：删除当前光标后面的所有文字（还有剪切功能）Ctrl + L：进行清屏操作Ctrl + Y：粘贴Ctrl + U或Ctrl + K剪切的内容Ctrl + W和Alt + D：对于当前的单词进行删除操作，W删除光标前面的单词的字符，D则删除后面的字符 Alt + Backsapce：删除当前光标后面的单词 2、说明12345Ctrl + K: 先按住 Ctrl 键，然后再按 K 键；Alt + K: 先按住 Alt 键，然后再按 K 键；Esc + K：先单击 Esc 键，然后再按 K 键。 3、移动光标12345678910111213141516171819Ctrl + A：移到行首Ctrl + E：移到行尾Ctrl + B：往回(左)移动一个字符（相当于左键）Ctrl + F：往后(右)移动一个字符（相当于右键）Ctrl + XX：（两个X）在命令行尾和光标之间移动Alt + B：往回(左)移动一个单词Alt + F：往后(右)移动一个单词Esc + B：往回(左)移动一个单词Esc + F：往后(右)移动一个单词Esc + T：交换光标位置前的两个单词 4、编辑命令1234567891011121314151617181920212223Ctrl + H ：删除光标左方位置的字符Ctrl + D：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会注销系统或结束终端）Ctrl + W ：由光标位置开始，往左删除单词。往行首删Alt + D ：由光标位置开始，往右删除单词。往行尾删Esc + D ：由光标位置开始，删除单词，直到该单词结束。Ctrl + K ：由光标所在位置开始，删除右方所有的字符，直到该行结束。Ctrl + U ：由光标所在位置开始，删除左方所有的字符，直到该行开始。Ctrl + Y ：粘贴之前删除的内容到光标后。Ctrl + T ：交换光标处和之前两个字符的位置。Alt + . ：使用上一条命令的最后一个参数。Ctrl + _ ：回复之前的状态。撤销操作。Ctrl + A + K ，或 Ctrl + E + U 或 Ctrl + K + U 组合可删除整行。 5、查找历史命令1234567Ctrl + P：显示当前命令的上一条历史命令（相当于上键）Ctrl + N：显示当前命令的下一条历史命令（相当于下键）Ctrl + R：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter键执行匹配命令；ESC键在命令行显示而不执行匹配命令。Ctrl + G：从历史搜索模式（Ctrl + R）退出。 5、控制命令1234567891011Ctrl + L：清除屏幕，然后，在最上面重新显示目前光标所在的这一行的内容。Ctrl + O：执行当前命令，并选择上一条命令。Ctrl + S：阻止屏幕输出Ctrl + Q：允许屏幕输出Ctrl + C：终止命令Ctrl + Z：挂起命令（使用‘fg’命令恢复） 6、重复执行操作动作1Esc – 操作次数 操作动作 ： 指定操作次数，重复执行指定的操作。 7、Bang(!)命令123456789101112131415161718192021!! ：执行上一条命令。^foo^bar ：把上一条命令里的foo替换为bar，并执行。!wget ：执行最近的以wget开头的命令。!wget:p ：仅打印最近的以wget开头的命令，不执行。!$ ：上一条命令的最后一个参数， 与 Alt - . 和 $_ 相同。!* ：上一条命令的所有参数!*:p ：打印上一条命令是所有参数，也即 !*的内容。^abc ：删除上一条命令中的abc。^foo^bar ：将上一条命令中的 foo 替换为 bar^foo^bar^ ：将上一条命令中的 foo 替换为 bar!-n ：执行前n条命令，执行上一条命令： !-1， 执行前5条命令的格式是： !-5","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://xinglinglove.cn/tags/linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Windows 10系统下如何关闭烦人的自动更新","slug":"close-windows-update","date":"2019-01-27T09:11:13.000Z","updated":"2019-05-27T09:27:39.371Z","comments":true,"path":"2019/01/27/close-windows-update/","link":"","permalink":"http://xinglinglove.cn/2019/01/27/close-windows-update/","excerpt":"","text":"1、按键盘上的“Windows徽标键+R”组合键，可以调出“运行”窗口 2、在“运行”窗口中输入“gpedit.msc” 3、在“运行”窗口输入“gpedit.mac”后点击“确定”按钮，会弹出“本地策略编辑器(下图)” 4、点击“计算机配置”下的“管理模版”，然后点击“管理模版”下的“Windows 组件”，然后在“Windows 组件”下找到“Windows 更新”，点击“Windows 更新”；然后找到右边列表里面的“配置自动更新（下图） 5、双击运行“配置更新”，会弹出“配置更新”窗口；窗口上面的3个单项按钮，默认选中是“未配置”，这里需要修改为“已禁用（下图）”；然后点击“确定”按钮 6、大功告成","categories":[{"name":"工具","slug":"工具","permalink":"http://xinglinglove.cn/categories/工具/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://xinglinglove.cn/tags/windows/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://xinglinglove.cn/categories/工具/"}]},{"title":"spring-boot整合docker插件实现项目部署","slug":"spring-boot-docker","date":"2018-12-26T12:42:29.000Z","updated":"2019-05-27T08:31:16.201Z","comments":true,"path":"2018/12/26/spring-boot-docker/","link":"","permalink":"http://xinglinglove.cn/2018/12/26/spring-boot-docker/","excerpt":"","text":"1、 部署环境（docker安装步骤参考之前的博客）JDK1.8、Docker1.13.1、CentOS7.02、docker开启远程访问1[root@xinglinglove ~]# vim /lib/systemd/system/docker.service 2、docker开启远程访问红色部分为新增内容1234567891011121314151617181920212223242526272829303132333435363738394041[Unit]Description=Docker Application Container EngineDocumentation=http://docs.docker.comAfter=network.target rhel-push-plugin.socket registries.serviceWants=docker-storage-setup.serviceRequires=docker-cleanup.timer[Service]Type=notifyNotifyAccess=allEnvironmentFile=-/run/containers/registries.confEnvironmentFile=-/etc/sysconfig/dockerEnvironmentFile=-/etc/sysconfig/docker-storageEnvironmentFile=-/etc/sysconfig/docker-networkEnvironment=GOTRACEBACK=crashEnvironment=DOCKER_HTTP_HOST_COMPAT=1Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbinExecStart=/usr/bin/dockerd-current \\ --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \\ --default-runtime=docker-runc \\ --exec-opt native.cgroupdriver=systemd \\ --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \\ --seccomp-profile=/etc/docker/seccomp.json \\ -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock \\ $OPTIONS \\ $DOCKER_STORAGE_OPTIONS \\ $DOCKER_NETWORK_OPTIONS \\ $ADD_REGISTRY \\ $BLOCK_REGISTRY \\ $INSECURE_REGISTRY \\ $REGISTRIESExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=1048576LimitNPROC=1048576LimitCORE=infinityTimeoutStartSec=0Restart=on-abnormalMountFlags=slaveKillMode=process[Install]WantedBy=multi-user.target 3.重启docker12[root@xinglinglove ~]# systemctl daemon-reload [root@xinglinglove ~]# systemctl restart docker.service 4.测试是否生效123curl http://140.143.0.126:2375/info返回如下信息代表开启成功&#123;\"ID\":\"27LC:PLU7:B5DF:H3KS:QGUH:TABJ:5YJC:DNEV:NEZL:L33Y:BOWB:KOZV\",\"Containers\":6,\"ContainersRunning\":5,\"ContainersP aus ed\":0,\"ContainersStopped\":1,\"Images\":10,\"Driver\":\"overlay2\",\"DriverStatus\":[[\"Backing Filesystem\",\"extfs\"],[\"Supports d_ type\",\"true\"],[\"Native Overlay Diff\",\"true\"]],\"SystemStatus\":null,\"Plugins\":&#123;\"Volume\":[\"local\"],\"Network\":[\"bridge\",\"hos t\",\"macvlan\",\"null\",\"overlay\"],\"Authorization\":null&#125;,\"MemoryLimit\":true,\"SwapLimit\":true,\"KernelMemory\":true,\"CpuCfsPeri od\":true,\"CpuCfsQuota\":true,\"CPUShares\":true,\"CPUSet\":true,\"IPv4Forwarding\":true,\"BridgeNfIptables\":true,\"BridgeNfIp6tab les\":true,\"Debug\":false,\"NFd\":50,\"OomKillDisable\":true,\"NGoroutines\":44,\"SystemTime\":\"2019-03-26T16:42:23.723116602+08:0 0\",\"LoggingDriver\":\"journald\",\"CgroupDriver\":\"systemd\",\"NEventsListener\":0,\"KernelVersion\":\"3.10.0-693.el7.x86_64\",\"PkgV ersion\":\"&lt;unknown&gt;\",\"OperatingSystem\":\"CentOS Linux 7 (Core)\",\"OSType\":\"linux\",\"Architecture\":\"x86_64\",\"IndexServerAddre ss\":\"https://index.docker.io/v1/\",\"IndexServerName\":\"docker.io\",\"RegistryConfig\":&#123;\"InsecureRegistryCIDRs\":[\"127.0.0.0/8\" ],\"IndexConfigs\":&#123;\"docker.io\":&#123;\"Name\":\"docker.io\",\"Mirrors\":null,\"Secure\":true,\"Official\":true&#125;&#125;,\"Mirrors\":[]&#125;,\"NCPU\":1, \"MemTotal\":1928822784,\"DockerRootDir\":\"/var/lib/docker\",\"HttpProxy\":\"\",\"HttpsProxy\":\"\",\"NoProxy\":\"\",\"Name\":\"xinglinglove \",\"Labels\":null,\"ExperimentalBuild\":false,\"ServerVersion\":\"1.13.1\",\"ClusterStore\":\"\",\"ClusterAdvertise\":\"\",\"Runtimes\":&#123;\" docker-runc\":&#123;\"path\":\"/usr/libexec/docker/docker-runc-current\"&#125;,\"runc\":&#123;\"path\":\"docker-runc\"&#125;&#125;,\"DefaultRuntime\":\"docker- runc\",\"Swarm\":&#123;\"NodeID\":\"\",\"NodeAddr\":\"\",\"LocalNodeState\":\"inactive\",\"ControlAvailable\":false,\"Error\":\"\",\"RemoteManagers \":null,\"Nodes\":0,\"Managers\":0,\"Cluster\":&#123;\"ID\":\"\",\"Version\":&#123;&#125;,\"CreatedAt\":\"0001-01-01T00:00:00Z\",\"UpdatedAt\":\"0001-01-01 T00:00:00Z\",\"Spec\":&#123;\"Orchestration\":&#123;&#125;,\"Raft\":&#123;\"ElectionTick\":0,\"HeartbeatTick\":0&#125;,\"Dispatcher\":&#123;&#125;,\"CAConfig\":&#123;&#125;,\"TaskDe faults\":&#123;&#125;,\"EncryptionConfig\":&#123;\"AutoLockManagers\":false&#125;&#125;&#125;&#125;,\"LiveRestoreEnabled\":false,\"Isolation\":\"\",\"InitBinary\":\"dock er-init\",\"ContainerdCommit\":&#123;\"ID\":\"\",\"Expected\":\"aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1\"&#125;,\"RuncCommit\":&#123;\"ID\":\"N/A\",\"Ex pected\":\"9df8b306d01f59d3a8029be411de015b7304dd8f\"&#125;,\"InitCommit\":&#123;\"ID\":\"N/A\",\"Expected\":\"949e6facb77383876aeff8a6944dde6 6b3089574\"&#125;,\"SecurityOptions\":[\"name=seccomp,profile=/etc/docker/seccomp.json\"],\"Registries\":[&#123;\"Name\":\"docker.io\",\"Secur e\":true&#125;]&#125; 5.在自己的spring-boot项目的pom中添加插件12345678910111213141516171819&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt; docker-maven-plugin &lt;/artifactId&gt; &lt;version&gt;0.4.14&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;website&lt;/imageName&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;dockerHost&gt; http://140.143.0.126:2375&lt;/dockerHost&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125; &lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 6.在工程中新建src/main/docker目录和Dockerfile文件123456789# 基于哪个镜像FROM java:8# 将本地文件夹挂载到当前容器VOLUME /tmp# 拷贝文件到容器，xinglinglove-website-0.0.1-SNAPSHOT.jar这里是maven打包后的名字ADD xinglinglove-website-0.0.1-SNAPSHOT.jar app.jarRUN bash -c 'touch /app.jar'# 配置容器启动后执行的命令ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] 7.构建镜像并上传至docker使用maven运行如下命令1clean package docker:build -DskipTests 8.上传成功后，在服务器输入docker imgaes查看镜像是否上传成功123[root@xinglinglove nginx]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwebsite latest 875823024f38 42 minutes ago 715 MB 9.新建容器，启动项目1[root@xinglinglove nginx]# docker run -t -d -p 8888:8888 website /bin/bash 10.访问项目地址，验证成功（登陆页有点丑，请见谅）http://140.143.0.126:8888/login 11.推送 image 到 Docker Hub首先，你在 Docker Hub 要有注册账号，且创建了相应的库；其次，docker 推送前，先要登录，否则报unauthorized: access to the requested resource is not authorized的错误12345[root@xinglinglove ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: xinglinglove1029Password: Login Succeeded 这里需要将website:v1镜像改名，在名称前加上自己的docker hub的Docker ID，即xinglinglove1029123456[root@xinglinglove ~]# docker tag b158f9fff842 xinglinglove1029/website:v1[root@xinglinglove ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwebsite latest b158f9fff842 2 days ago 721 MBxinglinglove1029/website v1 b158f9fff842 2 days ago 721 MB[root@xinglinglove ~]# docker push xinglinglove1029/website:v1","categories":[{"name":"后端","slug":"后端","permalink":"http://xinglinglove.cn/categories/后端/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://xinglinglove.cn/tags/docker/"},{"name":"spring-boot","slug":"spring-boot","permalink":"http://xinglinglove.cn/tags/spring-boot/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://xinglinglove.cn/categories/后端/"}]},{"title":"Cron表达式使用手册","slug":"cron","date":"2018-07-23T04:42:29.000Z","updated":"2019-05-27T08:22:33.297Z","comments":true,"path":"2018/07/23/cron/","link":"","permalink":"http://xinglinglove.cn/2018/07/23/cron/","excerpt":"","text":"1、官方详解12345678910111213* 第一位，表示秒，取值0-59* 第二位，表示分，取值0-59* 第三位，表示小时，取值0-23* 第四位，日期天/日，取值1-31* 第五位，日期月份，取值1-12* 第六位，星期，取值1-7，星期一，星期二...，注：不是第1周，第二周的意思另外：1表示星期天，2表示星期一。* 第7为，年份，可以留空，取值1970-2099(*)星号：可以理解为每的意思，每秒，每分，每天，每月，每年...(?)问号：问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天3点执行，所以第六位星期的位置，我们是不需要关注的，就是不确定的值。同时：日期和星期是两个相互排斥的元素，通过问号来表明不指定值。比如，1月10日，比如是星期1，如果在星期的位置是另指定星期二，就前后冲突矛盾了。(-)减号：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12(,)逗号：表达一个列表值，如在星期字段中使用“1,2,4”，则表示星期一，星期二，星期四(/)斜杠：如：x/y，x是开始值，y是步长，比如在第一位（秒） 0/15就是，从0秒开始，每15秒，最后就是0，15，30，45，60 另：*/y，等同于0/y 2、使用案例1234560 0 3 * * ? 每天3点执行0 5 3 * * ? 每天3点5分执行0 5 3 ? * * 每天3点5分执行，与上面作用相同0 5/10 3 * * ? 每天3点的 5分，15分，25分，35分，45分，55分这几个时间点执行0 10 3 ? * 1 每周星期天，3点10分 执行，注：1表示星期天 0 10 3 ? * 1#3 每个月的第三个星期，星期天 执行，#号只能出现在星期的位置","categories":[{"name":"工具","slug":"工具","permalink":"http://xinglinglove.cn/categories/工具/"}],"tags":[{"name":"cron","slug":"cron","permalink":"http://xinglinglove.cn/tags/cron/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://xinglinglove.cn/categories/工具/"}]},{"title":"那些年我们用过的idea装逼大法","slug":"idea-config","date":"2018-06-26T09:35:15.000Z","updated":"2019-05-27T08:34:27.401Z","comments":true,"path":"2018/06/26/idea-config/","link":"","permalink":"http://xinglinglove.cn/2018/06/26/idea-config/","excerpt":"","text":"1、 Material Theme UI 漂亮的idea主题2、activate-power-mode 写代码是整个屏幕都在抖动，activate-power-mode是白的的，Power mode II色彩更酷炫点。3、Background Image Plusidea背景修改插件，让你的idea与众不同，可以设置自己喜欢的图片作为code背景。4、Grep console自定义日志颜色，idea控制台可以彩色显示各种级别的log，安装完成后，在console中右键就能打开。 并且可以设置不同的日志级别的显示样式。 5、Free Mybatis pluginmybatis 插件，让你的mybatis.xml像java代码一样编辑。我们开发中使用mybatis时时长需要通过mapper接口查找对应的xml中的sql语句，该插件方便了我们的操作。安装完成重启IDEA之后，我们会看到code左侧或多出一列绿色的箭头，点击箭头我们就可以直接定位到xml相应文件的位置。mapper如图： xml如图： 6、MyBatis Log PluginMybatis现在是java中操作数据库的首选，在开发的时候，我们都会把Mybatis的脚本直接输出在console中，但是默认的情况下，输出的脚本不是一个可以直接执行的。mapper如图： xml如图： 7、LombokJava语言，每次写实体类的时候都需要写一大堆的setter，getter，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担，这也是Java被诟病的一种原因。Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。安装完成之后，在应用Lombok的时候注意别忘了需要添加依，maven为例： xml如图： 8、Key promoterKey promoter 是IntelliJ IDEA的快捷键提示插件，会统计你鼠标点击某个功能的次数，提示 你应该用什么快捷键，帮助记忆快捷键，等熟悉了之后可以关闭掉这个插件。9、RestfultookitSpring MVC网页开发的时候，我们都是通过requestmapping的方式来定义页面的URL地址的，为了找到这个地址我们一般都是cmd+shift+F的方式进行查找，大家都知道，我们URL的命名一个是类requestmapping+方法requestmapping，查找的时候还是有那么一点不方便的，restfultookit就能很方便的帮忙进行查找。例如：我要找到/user/index 对应的controller,那么只要Ctrl+斜杠 10、Gsonformat可根据json数据快速生成java实体类。自定义个javaBean(无任何内容，就一个空的类)，复制你要解析的Json，然后alt+insert弹出如下界面或者使用快捷键 Alt+S，在里面粘贴刚刚复制的Json，点击OK即可。 11、JRebelJRebel是一种热部署生产力工具，修改代码后不用重新启动程序，所有的更改便可以生效。它跳过了Java开发中常见的重建、重新启动和重新部署周期。12、.ignore各类版本控制忽略文件生成工具 13、Rainbow Brackets对各个对称括号进行着色，方便查看 14、Maven HelperMaven 辅助插件15、Nyan progress bar漂亮的进度条插件:","categories":[{"name":"前端","slug":"前端","permalink":"http://xinglinglove.cn/categories/前端/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://xinglinglove.cn/tags/idea/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://xinglinglove.cn/categories/前端/"}]},{"title":"Centos安装gitlab","slug":"install-gitlab","date":"2018-05-27T04:03:30.000Z","updated":"2019-05-27T08:26:11.216Z","comments":true,"path":"2018/05/27/install-gitlab/","link":"","permalink":"http://xinglinglove.cn/2018/05/27/install-gitlab/","excerpt":"","text":"1、安装gitlab官网,安装所需依赖12345678[root@xinglinglove ~]# sudo yum install -y curl policycoreutils-python openssh-server[root@xinglinglove ~]# sudo systemctl enable sshd[root@xinglinglove ~]# sudo systemctl start sshd[root@xinglinglove ~]# sudo firewall-cmd --permanent --add-service=http[root@xinglinglove ~]# sudo systemctl reload firewalld[root@xinglinglove ~]# sudo yum install postfix[root@xinglinglove ~]# sudo systemctl enable postfix[root@xinglinglove ~]# sudo systemctl start postfix 2、下载一键安装包并安装1下载地址:https://packages.gitlab.com/gitlab/gitlab-ce 3、上传安装包1[root@xinglinglove ~]# rz gitlab-ce-10.2.5-ce.0.el7.x86_64.rpm 4、rpm 安装1[root@xinglinglove ~]# rpm -i gitlab-ce-10.2.5-ce.0.el7.x86_64.rpm 5、配置gitlab1[root@xinglinglove ~]gitlab-ctl reconfigure 6、打开浏览器登陆12默认的Administrator的账号和密码 Username: root Password: 5iveL!fe","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://xinglinglove.cn/tags/mysql/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos7源码编译安装NGINX","slug":"install-nginx","date":"2018-05-26T07:45:15.000Z","updated":"2019-05-27T08:26:34.937Z","comments":true,"path":"2018/05/26/install-nginx/","link":"","permalink":"http://xinglinglove.cn/2018/05/26/install-nginx/","excerpt":"","text":"1、 什么是nginxNginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。 2、 下载 进入http://nginx.org/en/download.html 下载nginx1.8.0版本（当前最新稳定版本）。 3、 nginx安装环境1234[root@xinglinglove ~]# yum –y install gcc-c++[root@xinglinglove ~]# yum install -y pcre pcre-devel[root@xinglinglove ~]# yum install -y zlib zlib-devel[root@xinglinglove ~]# yum install -y openssl openssl-devel 4、 编译安装将nginx-1.8.0.tar.gz拷贝至linux服务器。解压：1234567891011121314151617[root@xinglinglove ~]# tar -zxvf nginx-1.8.0.tar.gz[root@xinglinglove ~]# cd nginx-1.8.0[root@xinglinglove ~]# mkdir -p /var/temp/nginx[root@xinglinglove ~]# ./configure \\--prefix=/usr/local/nginx \\--pid-path=/var/run/nginx/nginx.pid \\--lock-path=/var/lock/nginx.lock \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--with-http_gzip_static_module \\--http-client-body-temp-path=/var/temp/nginx/client \\--http-proxy-temp-path=/var/temp/nginx/proxy \\--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\--http-scgi-temp-path=/var/temp/nginx/scgi[root@xinglinglove ~]#make -j 4[root@xinglinglove ~]#make install 5、启动nginx12[root@xinglinglove ~]# cd /usr/local/nginx/sbin/[root@xinglinglove ~]# ./nginx 6、查询nginx进程1234[root@xinglinglove ~]# ps -aux |grep nginxroot 10478 0.0 0.0 24880 800 ? Ss 17:19 0:00 nginx: master process ./sbin/nginxnobody 10479 0.0 0.0 27320 1816 ? S 17:19 0:00 nginx: worker processroot 12025 0.0 0.0 112704 976 pts/0 R+ 17:37 0:00 grep --color=auto nginx 7、停止nginx1[root@xinglinglove ~]#/usr/local/nginx/sbin/nginx -s stop 8、重新加载配置1[root@xinglinglove ~]#/usr/local/nginx/sbin/nginx -s reload 9、nginx反向代理通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 如下图： 10、 nginx反向代理配置 (反向代理rabbitmq)1234567891011#配置一个代理即rabbitmq服务器upstream rabbitmq_server &#123; server 192.168.101.5:15672; &#125;#配置一个虚拟主机 server &#123; listen 80; server_name rabbitmq.xinglinglove.cn; location / &#123; proxy_pass http://rabbitmq_server ; &#125; 11、测试http://rabbitmq.xinglinglove.cn","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://xinglinglove.cn/tags/nginx/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Docker搭建mysql 主从复制环境","slug":"install-mysql-master-slave","date":"2018-03-15T02:22:45.000Z","updated":"2019-05-27T08:26:26.403Z","comments":true,"path":"2018/03/15/install-mysql-master-slave/","link":"","permalink":"http://xinglinglove.cn/2018/03/15/install-mysql-master-slave/","excerpt":"","text":"1、安裝mysql1[root@xinglinglove ~]# docker pull index.tenxcloud.com/tenxcloud/mysql 2、首先创建两个文件my-master.cnf（主库配置）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## The MySQL Community Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[client]port = 3306socket = /var/run/mysqld/mysqld.sock[mysqld_safe]pid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.socknice = 0[mysqld]user = mysqlpid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockport = 3306basedir = /usrdatadir = /var/lib/mysqltmpdir = /tmplc-messages-dir = /usr/share/mysqlexplicit_defaults_for_timestamplog-bin = mysql-bin server-id = 1 # Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.#bind-address = 127.0.0.1#log-error = /var/log/mysql/error.log# Recommended in standard MySQL setupsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# * IMPORTANT: Additional settings that can override those from this file!# The files must end with '.cnf', otherwise they'll be ignored.#!includedir /etc/mysql/conf.d/ my-slave.cnf（从库配置）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## The MySQL Community Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[client]port = 3306socket = /var/run/mysqld/mysqld.sock[mysqld_safe]pid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.socknice = 0[mysqld]user = mysqlpid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockport = 3306basedir = /usrdatadir = /var/lib/mysqltmpdir = /tmplc-messages-dir = /usr/share/mysqlexplicit_defaults_for_timestamplog-bin = mysql-bin server-id = 2relay_log_recovery = 1skip_slave_start = 1slave-skip-errors = 1062,1032,1060# Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.#bind-address = 127.0.0.1#log-error = /var/log/mysql/error.log# Recommended in standard MySQL setupsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# * IMPORTANT: Additional settings that can override those from this file!# The files must end with '.cnf', otherwise they'll be ignored.#!includedir /etc/mysql/conf.d/ 4、创建master1docker run -d -e MYSQL_PASS=123456 --name mysql-master -v /usr/local/mysql/my-master.cnf:/etc/mysql/my.cnf -p 3306:3306 6cbe7615c508 5、创建slave1docker run -d -e MYSQL_PASS=123456 --name mysql-slave -v /usr/local/mysql/my-slave.cnf:/etc/mysql/my.cnf -p 3307:3306 6cbe7615c508 6、连接主库，创建一个用户并且用来同步数据1GRANT REPLICATION SLAVE ON *.* to 'admin'@'%' identified by '123456'; 7、查看主库状态123show master status;记住File、Position的值，如果没查到数据，请检查第一、第二步，配置问题。 我查出来的是mysql-bin.000004、317 8、连接到从库，运行以下命令，设置主库链接12change master to master_host='xxx.xx.xx.xx',master_user='admin',master_password='123456',master_log_file='mysql-bin.000004',master_log_pos=317,master_port=3306; 9、启动同步1start slave; 10、查看同步状态1show slave status; 10、如果看到Waiting for master send event.. 什么的就成功了，你现在在主库上的修改，都会同步到从库上","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://xinglinglove.cn/tags/mysql/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos7通过yum安装mysql5.7","slug":"install-mysql","date":"2018-02-15T06:22:45.000Z","updated":"2019-05-27T08:26:17.442Z","comments":true,"path":"2018/02/15/install-mysql/","link":"","permalink":"http://xinglinglove.cn/2018/02/15/install-mysql/","excerpt":"","text":"1、去官网下载myql的yum源安装包(mysql57-community-release-el7-11.noarch.rpm)2、安装myql的yum源1[root@xinglinglove local]# yum localinstall mysql57-community-release-el7-11.noarch.rpm 3、通过yum安装msyql1[root@xinglinglove local]# yum install -y mysql-community-server 4、查看msyql服务状态1[root@xinglinglove local]# systemctl status mysqld.service 5、启动mysql服务1[root@xinglinglove local]# systemctl start mysqld.service 6、查看mysql密码12345[root@xinglinglove ]# cat /etc/my.conflog-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid[root@xinglinglove ]# more /var/log/mysqld.log2017-08-23T11:42:20.569786Z 1 [Note] A temporary password is generated for root@localhost: vrwrge#&amp;4/oA 7、登陆mysql1[root@xinglinglove ]# msyql -u root -p 8、修改密钥复杂度配置12mysql&gt; set global validate_password_policy=0;mysql&gt; set global validate_password_length=6; 9、修改密码1mysql&gt; alter user 'root'@'localhost' identified by '123456'; 10、开启远程访问12mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;mysql&gt; flush privileges;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://xinglinglove.cn/tags/mysql/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos7源码编译安装redis","slug":"install-redis","date":"2018-02-12T05:32:29.000Z","updated":"2019-05-28T03:59:15.143Z","comments":true,"path":"2018/02/12/install-redis/","link":"","permalink":"http://xinglinglove.cn/2018/02/12/install-redis/","excerpt":"","text":"1、安装编译所依赖的软件1[root@xinglinglove ~]# yum -y install gcc gcc-c++ autoconf automake make 2、去官网下載redis1234567891011[root@xinglinglove ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz--2017-12-20 14:50:48-- http://download.redis.io/releases/redis-4.0.6.tar.gz正在解析主机 download.redis.io (download.redis.io)... 109.74.203.151正在连接 download.redis.io (download.redis.io)|109.74.203.151|:80... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：1723533 (1.6M) [application/x-gzip]正在保存至: “redis-4.0.6.tar.gz”100%[====================================================================================================================================================================================================================================&gt;] 1,723,533 235KB/s 用时 7.8s 2017-12-20 14:50:57 (216 KB/s) - 已保存 “redis-4.0.6.tar.gz” [1723533/1723533]) 3、解压1[root@xinglinglove ~]# tar -zxvf redis-4.0.6.tar.gz 4、进入解压的目录1[root@passcloud-test-002 ~]# cd redis-4.0.6/ 5、编译源码(用4核同时编译可以提高编译效率)1[root@passcloud-test-002 redis-4.0.6]# make -j 4 6、安装12345678910111213[root@xinglinglove redis-4.0.6]# make install PREFIX=/usr/local/rediscd src &amp;&amp; make installmake[1]: 进入目录“/root/redis-4.0.6/src” CC Makefile.depmake[1]: 离开目录“/root/redis-4.0.6/src”make[1]: 进入目录“/root/redis-4.0.6/src”Hint: It's a good idea to run 'make test' ;) INSTALL install INSTALL install INSTALL install INSTALL install INSTALL installmake[1]: 离开目录“/root/redis-4.0.6/src” 7、添加配置文件,将/usr/local/software/redis-4.0.2目录下的redis.conf文件，复制到之前安装Redis的目录/usr/local/redis/bin中1[root@xinglinglove bin]# cp /root/redis-4.0.6/redis.conf /usr/local/redis/bin/ 8、修改redis的配置文件123456789[root@xinglinglove bin]# vim /usr/local/redis/bin/redis.conf注释掉 bind 127.0.0.1,让所有ip都可以访问redis服务# bind 127.0.0.1然后修改protected-mode为no, 才能完成暴漏redis的服务protected-mode no修改daemonize为yes，使启动服务时为后台启动daemonize yes#requirepass foobared去掉注释，foobared改为自己的密码，我在这里改为requirepass 123456 9、启动Redis服务，在Redis的bin目录下运行./redis-server redis.conf命令1[root@xinglinglove bin]# ./redis-server ./redis.conf 10、如果想在任何地方输入redis-server命令则需要在/etc/profile文件加入环境变量1234[root@xinglinglove bin]# vim /etc/profile#set redis envirenmentexport REDIS_HOME=/usr/local/redis/binexport PATH=$JAVA_HOME/bin:$PATH:$REDIS_HOME 10、使配置文件生效1[root@xinglinglove bin]# source /etc/profile 11、redis的生产环境启动方案把redis作为一个系统的daemon进程去运行的，每次系统启动，redis进程一起启动（1）redis utils目录下，有个redis_init_script脚本（2）将redis_init_script脚本拷贝到linux的/etc/init.d目录中，将redis_init_script重命名为redis_6379，6379是我们希望这个redis实例监听的端口号（3）修改redis_6379脚本的第6行的REDISPORT，设置为相同的端口号（默认就是6379）（4）创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6379（存放redis的持久化文件）（5）修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6379.conf（6）修改redis.conf中的部分配置为生产环境 daemonize yes 让redis以daemon进程运行 pidfile /var/run/redis_6379.pid 设置redis的pid文件位置 port 6379 设置redis的监听端口号 dir /var/redis/6379 设置持久化文件的存储位置（7）启动redis，执行cd /etc/init.d, chmod 755 redis_6379，./redis_6379 start（8）确认redis进程是否启动，ps -ef | grep redis（9）让redis跟随系统启动自动启动 # chkconfig: 2345 90 10 # description: Redis is a persistent key-value database 12345678910[root@xinglinglove bin]# cp redis_init_script /etc/init.d/[root@xinglinglove bin]# mv redis_init_script redis_6379[root@xinglinglove bin]# mkdir -p /var/redis/6379 /etc/redis[root@xinglinglove bin]# cp /usr/local/redis/bin/redis.conf /etc/redis/[root@xinglinglove redis]# mv redis.conf 6379.conf[root@xinglinglove bin]# /etc/init.d/redis_6379 start[root@xinglinglove bin]#vim /etc/init.d/redis_6379 加入# chkconfig: 2345 90 10 # description: Redis is a persistent key-value database[root@xinglinglove bin] chkconfig redis_6379 on","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://xinglinglove.cn/tags/redis/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos7通过yum安装nginx","slug":"yum-install-nginx","date":"2017-11-26T12:32:29.000Z","updated":"2019-05-27T08:26:56.854Z","comments":true,"path":"2017/11/26/yum-install-nginx/","link":"","permalink":"http://xinglinglove.cn/2017/11/26/yum-install-nginx/","excerpt":"","text":"1、检查是否安装nginx1[root@xinglinglove ~]#nginx -V 2、安装nginx所需的yum源1[root@xinglinglove ~]# yum -y install epel-release 3、安装nginx1[root@xinglinglove ~]# yum -y install nginx 4、查看nginx配置文件目录123[root@xinglinglove ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 5、启动nginx1[root@xinglinglove ~]# nginx 6、查看进程1234[root@xinglinglove ~]# ps -ef|grep nginxroot 3543 1 0 09:43 ? 00:00:00 nginx: master process nginxnginx 3544 3543 0 09:43 ? 00:00:00 nginx: worker processroot 3550 2325 0 09:43 pts/0 00:00:00 grep --color=auto nginx 7、停止nginx123[root@xinglinglove ~]# nginx -s stop[root@xinglinglove ~]# ps -ef|grep nginxroot 3640 2325 0 09:44 pts/0 00:00:00 grep --color=auto nginx","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://xinglinglove.cn/tags/nginx/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"通过docker安装mysql、redis、rabbitmq、jenkins","slug":"docker-install-sorft","date":"2017-10-26T15:42:29.000Z","updated":"2019-05-27T08:25:54.169Z","comments":true,"path":"2017/10/26/docker-install-sorft/","link":"","permalink":"http://xinglinglove.cn/2017/10/26/docker-install-sorft/","excerpt":"","text":"1、安裝mysql12docker pull index.tenxcloud.com/tenxcloud/mysqldocker run -d -p 3306:3306 -e MYSQL_PASS=\"123456\" --restart=always --name mysql3306 IMAGE ID 2、安裝redis12docker pull index.tenxcloud.com/tenxcloud/redisdocker run -d -p 6379:6379 -e REDIS_PASS=\"123456\" --restart=always --name redis6379 IMAGE ID 3、安装rabbitmq12docker pull index.tenxcloud.com/tenxcloud/rabbitmqdocker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq --restart=always IMAGE ID 4、安裝mysql12docker pull index.tenxcloud.com/tenxcloud/mysqldocker run -d -p 3306:3306 -e MYSQL_PASS=\"123456\" --restart=always --name mysql3306 IMAGE ID 5、安装jenkins12docker pull index.tenxcloud.com/docker_library/jenkinsdocker run -d -p 8080:8080 -p 50000:50000 --name jenkins --restart=always IMAGE ID","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://xinglinglove.cn/tags/docker/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos 6.X安装docker","slug":"centos6-x-install-docker","date":"2017-01-27T04:23:23.000Z","updated":"2019-05-27T08:25:23.737Z","comments":true,"path":"2017/01/27/centos6-x-install-docker/","link":"","permalink":"http://xinglinglove.cn/2017/01/27/centos6-x-install-docker/","excerpt":"","text":"1、查看系统版本和内核1234[root@xinglinglove ~]# cat /etc/centos-release CentOS release 6.6 (Final) [root@xinglinglove ~]# uname -a Linux xinglinglove 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux 2、查询selinux的状态1234567[root@xinglinglove ~]# sestatus SELinux status: enabled SELinuxfs mount: /selinux Current mode: enforcing Mode from config file: enforcing Policy version: 24 Policy from config file: targeted 3、 禁用selinux1234567891011[root@xinglinglove ~]# vim /etc/selinux/config# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced.# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=enforcing# SELINUXTYPE= can take one of these two values:# targeted - Targeted processes are protected,# mls - Multi Level Security protection.SELINUXTYPE=targeted 4、修改SELINUX=disabled，保存并退出123[root@xinglinglove ~]# getenforce Enforcing [root@xinglinglove ~]# setenforce 0 5、安装 Fedora EPEL123[root@xinglinglove ~]# wget http://ftp.riken.jp/Linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm或者通过yum安装docker源[root@xinglinglove ~]# yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 6、安装docker1[root@xinglinglove ~]# yum install docker-io 7、启动docker1[root@xinglinglove ~]# /etc/init.d/docker start 8、测试并拉取镜像12345678910[root@xinglinglove ~]# docker pull centos latest: Pulling from centos 5932f74ff0cd: Pull complete 4a7b890637c2: Pull complete 4beff0251382: Pull complete Digest: sha256:cb2a2bffb199880da9c69e7f647c01c720c6f95b186a86cfbd3ef168b8032074 Status: Downloaded newer image for centos:latest [root@xinglinglove ~]# docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE centos latest 4beff0251382 9 days ago 192.5 MB 9、创建容器123456789[root@xinglinglove ~]# docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE centos latest 4beff0251382 9 days ago 192.5 MB [root@xinglinglove ~]# docker run -itd centos /bin/bash a7c7d5bb70b0b04aae9e47d6f05be352facc8b5270b04d0ac752510bdcd8a8c1 [root@xinglinglove ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a7c7d5bb70b0 centos “/bin/bash” 15 seconds ago Up 14 seconds sleepy_euclid [root@xinglinglove ~]# docker exec -it a7c7d5bb70b0 /bin/bash 10、导出容器镜像123[root@xinglinglove ~]# docker export a7c7d5bb70b0 &gt; centos7.tar [root@xinglinglove ~]# ll centos7.tar -rw-r–r–. 1 root root 200184832 5月 21 22:55 centos7.tar 11、将镜像远程拷贝到另一台机器上测试镜像是否可以用12345678910111213141516171819202122[root@xinglinglove ~]# scp centos7.tar root@192.168.31.182:/ The authenticity of host ‘192.168.31.182 (192.168.31.182)’ can’t be established. RSA key fingerprint is ee:20:cc:fc:bd:f3:43:9f:67:95:83:67:d9:1c:fa:9f. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added ‘192.168.31.182’ (RSA) to the list of known hosts. root@192.168.31.182’s password: centos7.tar 100% 191MB 31.8MB/s 00:06 用xshell 连到192.168.31.182这台服务器上 [root@xinglinglove /]# ls bin boot centos7.tar data dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var [root@xinglinglove /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE [root@xinglinglove /]# cat centos7.tar | docker import - centos7-v1 sha256:c74ccf891cd7ca7528e605c2e1e7e7bb3427b5d528c3ade78e18a04d9a231569 [root@xinglinglove /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos7-v1 latest c74ccf891cd7 18 seconds ago 193MB [root@xinglinglove /]# docker run -it –name mycentos centos7-v1 /bin/bash [root@244e4b1845b0 /]# exit [root@xinglinglove /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 244e4b1845b0 centos7-v1 “/bin/bash” 4 minutes ago Exited (127) 2 minutes ago mycentos","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://xinglinglove.cn/tags/docker/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]},{"title":"Centos镜像搭建Yum源","slug":"centos-yum","date":"2017-01-26T15:42:29.000Z","updated":"2019-05-27T08:25:44.465Z","comments":true,"path":"2017/01/26/centos-yum/","link":"","permalink":"http://xinglinglove.cn/2017/01/26/centos-yum/","excerpt":"","text":"一、用Centos镜像搭建本地Yum源由于安装centos后的默认Yum源为centos的官方地址，所以在国内使用很慢甚至无法访问，所以一般的做法都是把默认的Yum源替换成aliyun的Yum源或者163等国内的Yum源(下文介绍如何配置)。 但是以上的方法都是需要网络的，当没有网络的时候就无法使用了，所以还有一个常用的方法就是用Centos的ISO镜像搭建本地Yum源，这样安装软件的速度就会飞快。1.安装Centos后默认的Yum源如下123456789[root@localhost ~]# ll /etc/yum.repos.d/总用量 28-rw-r--r--. 1 root root 1664 11月 30 2016 CentOS-Base.repo-rw-r--r--. 1 root root 1309 11月 30 2016 CentOS-CR.repo-rw-r--r--. 1 root root 649 11月 30 2016 CentOS-Debuginfo.repo-rw-r--r--. 1 root root 314 11月 30 2016 CentOS-fasttrack.repo-rw-r--r--. 1 root root 630 11月 30 2016 CentOS-Media.repo-rw-r--r--. 1 root root 1331 11月 30 2016 CentOS-Sources.repo-rw-r--r--. 1 root root 2893 11月 30 2016 CentOS-Vault.repo 2.把默认Yum源备份(可选)12[root@localhost ~]# mkdir /opt/centos-yum.bak[root@localhost ~]# mv /etc/yum.repos.d/* /opt/centos-yum.bak/ 3.在虚拟机上挂载CentOS镜像文件123[root@localhost ~]# mkdir /opt/centos[root@localhost ~]# mount -t iso9660 /dev/sr0 /opt/centosmount: /dev/sr0 写保护，将以只读方式挂载 4.编写repo文件并指向镜像的挂载目录123456[root@localhost ~]# vi /etc/yum.repos.d/local.repo[local]name=localbaseurl=file:///opt/centosenabled=1gpgcheck=0 5.清除缓存1234567[root@localhost ~]# yum clean all已加载插件：fastestmirror, langpacks正在清理软件源： localCleaning up everythingCleaning up list of fastest mirrors[root@localhost ~] # yum makecache //把Yum源缓存到本地，加快软件的搜索好安装速度[root@localhost ~] # yum list 二、把默认的CentOS Yum源修改成国内的aliyun Yum源1.下载aliyun Yum源repo文件(对应自己的系统版本下载即可)1234567#各系统版本repo文件对应的下载操作CentOS 5wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repoCentOS 6wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repoCentOS 7wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 2. 查看系统的版本12[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.3.1611 (Core) 3.下载对应的repo文件1234567891011[root@localhost ~]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo--2019-03-11 22:16:35-- http://mirrors.aliyun.com/repo/Centos-7.repo正在解析主机 mirrors.aliyun.com (mirrors.aliyun.com)... 219.238.20.83, 219.238.20.101, 219.238.20.86, ...正在连接 mirrors.aliyun.com (mirrors.aliyun.com)|219.238.20.83|:80... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：2523 (2.5K) [application/octet-stream]正在保存至: “/etc/yum.repos.d/CentOS-Base.repo”100%[=======================================================================================================================================================================================================&gt;] 2,523 --.-K/s 用时 0.004s 2019-03-11 22:16:41 (611 KB/s) - 已保存 “/etc/yum.repos.d/CentOS-Base.repo” [2523/2523]) 三、把默认的CentOS Yum源修改成国内的163源1.下载163 Yum源repo文件1234567#各系统版本repo文件对应的下载操作CentOS 5wget -O /etc/yum.repos.d/CentOS5-Base-163.repo http://mirrors.163.com/.help/CentOS5-Base-163.repoCentOS 6wget -O /etc/yum.repos.d/CentOS6-Base-163.repo http://mirrors.163.com/.help/CentOS6-Base-163.repoCentOS 7wget -O /etc/yum.repos.d/CentOS7-Base-163.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo 四、修改Yum源的优先级1.查看是否安装yum-plugin-priorities.noarch这个插件12[root@kangvcar ~]# rpm -qa | grep yum-plugin-yum-plugin-fastestmirror-1.1.31-34.el7.noarch 2.安装yum-plugin-priorities.noarch这个插件1[root@localhost ~]# yum -y install yum-plugin-priorities.noarch 3.查看插件是否启用1234[root@localhost ~]# cat /etc/yum/pluginconf.d/priorities.conf[main]enabled = 1//1为启用；0为禁用 4.修改本地Yum源优先级别，调整文件中这个参数的值大小（数字越小优先级越高）1priority=1","categories":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://xinglinglove.cn/tags/docker/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://xinglinglove.cn/categories/Linux/"}]}]}